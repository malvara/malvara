# -*- coding: utf-8 -*-
"""Grupo2_Sprint4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lzS4xyGxVs-qYjdKbgjBxKcfMA0ChCTx

# MÓDULO 4: INFERENCIA ESTADÍSTICA

- Sprint 4  

Grupo 2:

-Fernando Bañares

-Leandro Reyes

-Vicente Gajardo

-Nelson Alvarado

-Osvaldo Osorio
"""

import pandas as pd
from google.colab import files

# Seleccionar el archivo desde tu sistema local
archivo_cargado = files.upload()

# Leer el archivo CSV con pandas
df = pd.read_csv(list(archivo_cargado.keys())[0])

# Mostrar el DataFrame
df.head()

"""###Limpieza de Datos faltantes"""

# Eliminar las columnas especificadas
columns_to_drop = ['Alley', 'FireplaceQu', 'PoolQC', 'Fence', 'MiscFeature', 'LotFrontage']
df = df.drop(columns=columns_to_drop)

"""###Resumen estadístico con las variables restantes"""

# Mostrar el DataFrame
df.head()

# Realizar un resumen estadístico con las variables restantes
summary_stats = df.describe()

# Mostrar el resumen estadístico
print("\n",summary_stats)

"""###Gráficos exploratorios"""

import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats

# Seleccionar las columnas numéricas del DataFrame
numeric_columns = df.select_dtypes(include=['number']).columns

# Calcular el número de subgráficos necesarios
num_plots = len(numeric_columns)

# Configurar el tamaño del gráfico
plt.figure(figsize=(15, 5 * num_plots))

# Iterar sobre las columnas numéricas y generar histogramas y Q-Q plots
for i, col in enumerate(numeric_columns, 1):
    plt.subplot(num_plots, 2, 2*i-1)

    # Histograma
    sns.histplot(df[col], kde=True)
    plt.title(f'Histograma de {col}')

    plt.subplot(num_plots, 2, 2*i)

    # Q-Q plot
    stats.probplot(df[col], dist="norm", plot=plt)
    plt.title(f'Q-Q plot de {col}')

plt.tight_layout()
plt.show()

"""###Matriz de correlación"""

import warnings
warnings.filterwarnings("ignore")

# Matriz de correlación:

corrmat = df.corr()
f, ax = plt.subplots(figsize=(12, 9))
sns.heatmap(corrmat, vmax=.8, square=True);

"""#### Matriz de correlación de SalePrice"""

# Matriz de correlación SalePrice
k = 10 # Número de variables.
cols = corrmat.nlargest(k, 'SalePrice')['SalePrice'].index
cm = np.corrcoef(df[cols].values.T)
sns.set(font_scale = 1.25)
hm = sns.heatmap(cm, cbar = True, annot = True, square = True, fmt = '.2f', annot_kws = {'size': 10}, yticklabels = cols.values, xticklabels = cols.values)
plt.show()

"""###Ranking de correlación de SalePrice"""

#Ranking de correlación de SalePrice
corr = df.corr()
corr[['SalePrice']].sort_values(by = 'SalePrice',ascending = False)\
.style.background_gradient()

"""###Histograma y gráfico de probabilidad normal SalePrice"""

# Histograma y gráfico de probabilidad normal:
import matplotlib.pyplot as plt
import numpy as np
import scipy.stats
from scipy.stats import norm
import seaborn as sns
import warnings
warnings.filterwarnings("ignore")

sns.distplot(df['SalePrice'], fit = norm);
fig = plt.figure()
res = stats.probplot(df['SalePrice'], plot = plt)

"""#### Histograma SaleCondition"""

print("\n\nHistograma SaleCondition")
plt.figure(figsize=(10, 6))
sns.histplot(df['SaleCondition'].dropna(), kde=False, bins=20)
plt.title('Histograma SaleCondition')
plt.xlabel('Condiciones de venta')
plt.ylabel('Frecuencia')
plt.show()
print("\nSe grafica un histograma de Condicion de venta de casas para visualizar la distribución de forma de venta de las casas del estudio")

"""###Aplicar Filtro campos MSZoning, BldgType y HouseStyle"""

import numpy as np
#FILTRO
condicion = (df["MSZoning"].isin(['RH','RM'])) & (df["MSZoning"] == 'RM') & (df["BldgType"] == '1Fam') & (df["HouseStyle"] == '1Story')
df_filtrado = df[condicion]
df_filtrado.head(5)

"""###Resumen estadístico de datos filtrados"""

# Mostrar el DataFrame
df_filtrado.head()

# Realizar un resumen estadístico con las variables restantes
summary_stats = df_filtrado.describe()

# Mostrar el resumen estadístico
print("\n",summary_stats)

nombre_archivo = 'datos.xlsx'
df_filtrado.to_excel(nombre_archivo, index=False)

"""##Graficos de datos filtrados"""

import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats

# Seleccionar las columnas numéricas del DataFrame
numeric_columns = df_filtrado.select_dtypes(include=['number']).columns

# Calcular el número de subgráficos necesarios
num_plots = len(numeric_columns)

# Configurar el tamaño del gráfico
plt.figure(figsize=(15, 5 * num_plots))

# Iterar sobre las columnas numéricas y generar histogramas y Q-Q plots
for i, col in enumerate(numeric_columns, 1):
    plt.subplot(num_plots, 2, 2*i-1)

    # Histograma
    sns.histplot(df_filtrado[col], kde=True)
    plt.title(f'Histograma de {col}')

    plt.subplot(num_plots, 2, 2*i)

    # Q-Q plot
    stats.probplot(df_filtrado[col], dist="norm", plot=plt)
    plt.title(f'Q-Q plot de {col}')

plt.tight_layout()
plt.show()

"""###Histograma SaleCondition de datos filtrados"""

print("\n\nHistograma SaleCondition")
plt.figure(figsize=(10, 6))
sns.histplot(df_filtrado['SaleCondition'].dropna(), kde=False, bins=20)
plt.title('Histograma SaleCondition')
plt.xlabel('Condiciones de venta')
plt.ylabel('Frecuencia')
plt.show()
print("\nSe grafica un histograma de Condicion de venta de casas para visualizar la distribución de forma de venta de las casas del estudio")

"""### Remuestreo e intervalo de confianza"""

import numpy as np

# Número de remuestreos
num_remuestreos = 1000

# Realizar bootstrapping
resultados_bootstrapping = []

for _ in range(num_remuestreos):
    # Muestreo con reemplazo
    muestra_bootstrap = df_filtrado.sample(n=len(df_filtrado), replace=True)

    # Realizar análisis o cálculos específicos en la muestra_bootstrap
    resultado = muestra_bootstrap['SalePrice'].mean()

    # Guardar el resultado
    resultados_bootstrapping.append(resultado)



# intervalo de confianza del 95% de tus resultados
intervalo_confianza = np.percentile(resultados_bootstrapping, [2.5, 97.5])
print("Intervalo de confianza al 95%:", intervalo_confianza)

"""###Test de hipotesis"""

import numpy as np
from scipy import stats as ss
from math import sqrt

# Z_alpha y alpha de la muestra

Z_alpha = -ss.norm.isf(0.95, loc=0, scale=1)
print("\nZ Alpha : ",Z_alfa)
alpha = 0.05  # Nivel de significación del 5%

# Tamaño de la muestra
n = len(df_filtrado)
print("\nn : ",n)

# Z de la muestra
Z = ((41/43)-0.8)/sqrt((0.8*0.2)/43)
print("\nZ : ",Z)

# Prueba de hipótesis
# H0: El promedio de la la condicion de venta a crédito normal es igual a 90%
# H1: El promedio la condicion de venta a crédito normal es superior al 90%

# Valor p  valor determinado
p_value = 0.9

# Decisión de hipótesis
if p_value < Z_alpha:
    decision = "Hay evidencia para rechazar la hipótesis nula.\nPor lo tanto, hay evidencia para afirmar que la condicion de venta a crédito supera el 90%.\n"
else:
    decision = "No hay evidencia para rechazar la hipótesis nula.\nPor lo tanto, no hay evidencia para afirmar que la condicion de venta a crédito supera el 90%.\n"

# Resultados
print(f"\nValor p : {p_value}")
print(f"\nDecisión : {decision}")
print("\n\nGrupo 2")